// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: publisher.proto

package publisher

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Publisher service

func NewPublisherEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "Publisher.PushTask",
			Path:    []string{"/pumper/resource"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "Publisher.PullTask",
			Path:    []string{"/pumper/resource"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
	}
}

// Client API for Publisher service

type PublisherService interface {
	PushTask(ctx context.Context, in *TaskSpec, opts ...client.CallOption) (*NodeSpec, error)
	PullTask(ctx context.Context, in *TaskSpec, opts ...client.CallOption) (*emptypb.Empty, error)
}

type publisherService struct {
	c    client.Client
	name string
}

func NewPublisherService(name string, c client.Client) PublisherService {
	return &publisherService{
		c:    c,
		name: name,
	}
}

func (c *publisherService) PushTask(ctx context.Context, in *TaskSpec, opts ...client.CallOption) (*NodeSpec, error) {
	req := c.c.NewRequest(c.name, "Publisher.PushTask", in)
	out := new(NodeSpec)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherService) PullTask(ctx context.Context, in *TaskSpec, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "Publisher.PullTask", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Publisher service

type PublisherHandler interface {
	PushTask(context.Context, *TaskSpec, *NodeSpec) error
	PullTask(context.Context, *TaskSpec, *emptypb.Empty) error
}

func RegisterPublisherHandler(s server.Server, hdlr PublisherHandler, opts ...server.HandlerOption) error {
	type publisher interface {
		PushTask(ctx context.Context, in *TaskSpec, out *NodeSpec) error
		PullTask(ctx context.Context, in *TaskSpec, out *emptypb.Empty) error
	}
	type Publisher struct {
		publisher
	}
	h := &publisherHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Publisher.PushTask",
		Path:    []string{"/pumper/resource"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Publisher.PullTask",
		Path:    []string{"/pumper/resource"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Publisher{h}, opts...))
}

type publisherHandler struct {
	PublisherHandler
}

func (h *publisherHandler) PushTask(ctx context.Context, in *TaskSpec, out *NodeSpec) error {
	return h.PublisherHandler.PushTask(ctx, in, out)
}

func (h *publisherHandler) PullTask(ctx context.Context, in *TaskSpec, out *emptypb.Empty) error {
	return h.PublisherHandler.PullTask(ctx, in, out)
}
